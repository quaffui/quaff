@use "$css/mixins/design";
@use "$css/variables";

// type can be: checkbox, radio or switch
@mixin selection($type) {
  width: auto;
  height: auto;
  line-height: normal;
  white-space: nowrap;
  cursor: pointer;
  display: inline-flex;
  align-items: center;

  @if $type == checkbox or $type == radio {
    > input {
      width: 1.5rem;
      height: 1.5rem;
      opacity: 0;
    }

    > span:not(:empty) {
      padding-left: 0.25rem;
    }

    > input:not(label[aria-disabled] > input):is(:focus, :hover) + span::before {
      background-color: design.with-alpha(var(--primary), 10%);
      box-shadow: 0 0 0 0.5rem design.with-alpha(var(--primary), 10%);
    }

    > input:not([aria-disabled], label[aria-disabled] > input):checked + span::before,
    &--icon > input:checked + span > i {
      color: var(--primary);
    }
  }

  > span {
    display: inline-flex;
    align-items: center;
    color: var(--on-background);
    font-size: 0.875rem;
  }

  // the second selector was actually .icon > span > i before refactoring
  > span::before,
  &--icon > span > i {
    font-family: var(--font-icon);
    font-weight: normal;
    font-style: normal;
    font-size: 1.5rem;
    line-height: 1;
    letter-spacing: normal;
    text-transform: none;
    display: inline-block;
    white-space: nowrap;
    word-wrap: normal;
    direction: ltr;
    font-feature-settings: "liga";
    -webkit-font-smoothing: antialiased;
    vertical-align: middle;
    text-align: center;
    overflow: hidden;
    width: 1.5rem;
    height: 1.5rem;
    box-sizing: border-box;
    margin: 0 auto;
    outline: none;
    color: var(--primary);
    position: absolute;
    left: -1.5rem;
    background-color: transparent;
    border-radius: 50%;
    user-select: none;
    z-index: 1;
    box-shadow: 0 0 0 0 design.with-alpha(var(--primary), 10%);
    transition: variables.$speed1 all;
  }

  @if $type == checkbox {
    > span::before {
      content: "check_box_outline_blank";
    }

    > input:checked + span::before {
      content: "check_box";
      font-variation-settings: "FILL" 1;
    }
  }

  @if $type == radio {
    > span::before {
      content: "radio_button_unchecked";
    }

    > input:checked + span::before {
      content: "radio_button_checked";
    }
  }

  &--icon > span::before {
    content: "" !important;
    font-variation-settings: unset !important;
  }

  // selectors were just for .icon (...) before refactoring
  &--icon > input:checked + span > i:first-child,
  &--icon > span > i:last-child {
    opacity: 0;
  }

  // selectors were just for .icon (...) before refactoring
  &--icon > input:checked + span > i:last-child,
  &--icon > span > i:first-child {
    opacity: 1;
  }

  > input:disabled + span {
    opacity: 0.5;
    cursor: not-allowed;
  }

  & + &:not(.column > &) {
    margin-left: 0.5rem;
  }
}
