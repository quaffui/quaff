@use "$css/mixins";
@use "$css/variables";

:root {
  --header-height: 64px;
  --footer-height: 80px;

  --left-railbar-width: 88px;
  --right-railbar-width: 88px;

  --left-drawer-width: 300px;
  --right-drawer-width: 300px;
}

$contentSlot: ":not(.q-header, .q-footer, .q-railbar, .q-drawer)";

.q-layout {
  position: relative;
  width: 100%;
  height: 100%;
  min-width: 100%;
  min-height: 100%;
  overflow: hidden;

  & > #{$contentSlot} {
    height: 100%;
    overflow: auto;
    transition: padding var(--speed3);
  }
}

.q-layout > .q-header {
  z-index: 103;
  position: absolute;
  top: 0px;
  right: 0px;
  bottom: auto;
  left: 0px;
  height: var(--header-height);
  min-height: unset;
  border-radius: 0;

  &--fixed {
    position: fixed;

    &::before {
      margin: 0;
    }
  }

  & > nav {
    height: 100%;
    min-height: unset;
  }
}

.q-layout > .q-footer {
  z-index: 103;
  position: absolute;
  top: auto;
  right: 0px;
  bottom: 0px;
  left: 0px;
  height: var(--footer-height);
  min-height: unset;
  border-radius: 0;

  &--fixed {
    position: fixed;

    &::before {
      margin: 0;
    }
  }

  & > nav {
    height: 100%;
    min-height: unset;
  }

  & ~ #{$contentSlot} {
    padding-bottom: var(--footer-height);
  }
}

.q-layout > .q-railbar {
  z-index: 102;
  position: absolute;
  top: 0px;
  right: auto;
  bottom: 0px;
  left: auto;
  height: 100%;
  overflow: auto;
  transition: all var(--speed3);

  &--above {
    z-index: 105;
  }

  &--fixed {
    position: fixed;
  }

  &--left {
    left: 0px;
    width: var(--left-railbar-width);

    &.q-railbar--bordered {
      border-right: 0.0625rem solid var(--outline);
    }
  }

  &--right {
    right: 0px;
    width: var(--right-railbar-width);

    &.q-railbar--bordered {
      border-left: 0.0625rem solid var(--outline);
    }
  }

  & > .q-list {
    gap: 0.5rem;
  }

  & > .q-list > .q-item {
    flex-direction: column;
    border-radius: 2rem;
    align-items: center;
    justify-content: center;
    padding: 0 8px;
    gap: 0.25em;

    &.q-link::after {
      all: unset !important;
    }

    & > .q-item__section {
      justify-content: start;
    }

    & > i {
      transition: var(--speed1) padding linear;
      padding: 0.25rem;
    }

    &:is(:hover, :focus, &--active) > i {
      background-color: var(--secondary-container);
      color: var(--on-secondary-container);
      padding-inline: 1.5rem;
      font-variation-settings:
        "FILL" 1,
        "wght" 400,
        "opsz" 24;
    }
  }
}

.q-layout > .q-drawer {
  z-index: 101;
  border-radius: 0;

  &--above {
    z-index: 104;
  }

  $horizontal: "left", "right";
  $vertical: "top", "bottom";

  @each $vPos in $vertical {
    @each $hPos in $horizontal {
      &--#{$vPos}-#{$hPos}-radius {
        border-#{$vPos}-#{$hPos}-radius: 16px;
      }
    }
  }

  & .q-list > .q-item.q-link {
    border-radius: 2rem;
    overflow: hidden;

    &::before {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 100%;
      opacity: 0;
      border-radius: inherit;
      background: var(--secondary-container);
      z-index: -1;
      transform: scaleX(0.32);
      transition-duration: 0.2s;
      transition-property: transform, opacity;
      transition-timing-function: linear;
    }

    &.q-item--active {
      color: var(--on-secondary-container);

      &::before {
        opacity: 1;
        transform: scaleX(1);
      }
    }
  }
}

$elements: (
  top: "header",
  bottom: "footer",
);

@function without($toSub) {
  @return calc(100% - #{$toSub});
}

// Offset for content
.q-layout {
  & > .q-header ~ #{$contentSlot} {
    padding-top: var(--header-height);
  }
  & > .q-footer ~ #{$contentSlot} {
    padding-bottom: var(--footer-height);
  }

  & > .q-drawer.q-drawer--active.q-drawer--left:not(.q-drawer--overlay) ~ #{$contentSlot} {
    padding-left: variables.$LeftDrawer;
  }
  & > .q-drawer.q-drawer--active.q-drawer--right:not(.q-drawer--overlay) ~ #{$contentSlot} {
    padding-right: variables.$RightDrawer;
  }

  & > .q-railbar.q-railbar--left:not([style="display: none"]) {
    & ~ #{$contentSlot} {
      padding-left: variables.$LeftRailbar;
    }

    & ~ .q-drawer.q-drawer--active.q-drawer--left:not(.q-drawer--overlay) ~ #{$contentSlot} {
      padding-left: variables.$LeftFull;
    }
  }
  & > .q-railbar.q-railbar--right:not([style="display: none"]) {
    & ~ #{$contentSlot} {
      padding-right: variables.$RightRailbar;
    }

    & ~ .q-drawer.q-drawer--active.q-drawer--right:not(.q-drawer--overlay) ~ #{$contentSlot} {
      padding-right: variables.$RightFull;
    }
  }
}

// Inline offset for header, footer and drawers
.q-layout {
  @each $pos, $el in $elements {
    & > .q-railbar.q-railbar--left:not([style="display: none"]) {
      &:not(.q-railbar--offset-#{$pos}) ~ .q-#{$el},
      & ~ .q-drawer.q-drawer--left {
        left: variables.$LeftRailbar;
      }

      &
        ~ .q-drawer.q-drawer--active.q-drawer--left:not(
          .q-drawer--offset-#{$pos},
          .q-drawer--overlay
        )
        ~ .q-#{$el} {
        left: variables.$LeftFull;
      }
    }
    & > .q-railbar.q-railbar--right:not([style="display: none"]) {
      &:not(.q-railbar--offset-#{$pos}) ~ .q-#{$el},
      & ~ .q-drawer.q-drawer--right {
        right: variables.$RightRailbar;
      }

      &
        ~ .q-drawer.q-drawer--active.q-drawer--right:not(
          .q-drawer--offset-#{$pos},
          .q-drawer--overlay
        )
        ~ .q-#{$el} {
        right: variables.$RightFull;
      }
    }

    &
      > .q-drawer.q-drawer--active.q-drawer--left:not(.q-drawer--offset-#{$pos}, .q-drawer--overlay)
      ~ .q-#{$el} {
      left: variables.$LeftDrawer;
    }
    &
      > .q-drawer.q-drawer--active.q-drawer--right:not(
        .q-drawer--offset-#{$pos},
        .q-drawer--overlay
      )
      ~ .q-#{$el} {
      right: variables.$RightDrawer;
    }
  }
}

// Width for header and footer
.q-layout {
  @each $pos, $el in $elements {
    & > .q-railbar.q-railbar--left:not(.q-railbar--offset-#{$pos}, [style="display: none"]) {
      // Left railbar
      & ~ .q-#{$el} {
        width: without(variables.$LeftRailbar);
      }

      & ~ .q-drawer.q-drawer--active:not(.q-drawer--offset-#{$pos}, .q-drawer--overlay) {
        @include mixins.include-drawers(without(variables.$LeftRailbar), $pos, $el);
      }

      & ~ .q-railbar.q-railbar--right:not(.q-railbar--offset-#{$pos}, [style="display: none"]) {
        // Left railbar + Right railbar
        & ~ .q-#{$el} {
          width: without(variables.$LeftRightRailbar);
        }

        & ~ .q-drawer.q-drawer--active:not(.q-drawer--offset-#{$pos}, .q-drawer--overlay) {
          @include mixins.include-drawers(without(variables.$LeftRightRailbar), $pos, $el);
        }
      }
    }

    & > .q-railbar.q-railbar--right:not(.q-railbar--offset-#{$pos}, [style="display: none"]) {
      // Right railbar
      & ~ .q-#{$el} {
        width: without(variables.$RightRailbar);
      }

      & ~ .q-drawer.q-drawer--active:not(.q-drawer--offset-#{$pos}, .q-drawer--overlay) {
        @include mixins.include-drawers(without(variables.$RightRailbar), $pos, $el);
      }
    }

    & > .q-drawer.q-drawer--active:not(.q-drawer--offset-#{$pos}, .q-drawer--overlay) {
      @include mixins.include-drawers(100%, $pos, $el);
    }
  }
}

// Height for railbars and drawers
.q-layout {
  $drawerTypes: ".q-railbar", ".q-drawer";

  @each $drawerType in $drawerTypes {
    & > #{$drawerType} {
      &#{$drawerType}--offset-top#{$drawerType}--offset-bottom {
        height: calc(100% - var(--header-height) - var(--footer-height));
      }
    }

    @each $pos, $el in $elements {
      & > #{$drawerType} {
        &#{$drawerType}--offset-#{$pos} {
          #{$pos}: var(--#{$el}-height);
          height: calc(100% - var(--#{$el}-height));
        }
      }
    }
  }
}
