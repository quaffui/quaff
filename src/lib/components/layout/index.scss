:root {
  --header-height: 64px;
  --footer-height: 80px;

  --left-railbar-width: 88px;
  --right-railbar-width: 88px;

  --left-drawer-width: 300px;
  --right-drawer-width: 300px;
}

.q-layout {
  position: relative;
  width: 100%;
  height: 100%;
  min-width: 100%;
  min-height: 100%;
  overflow: hidden;

  & > :not(.q-header, .q-footer, .q-railbar, .q-drawer) {
    height: 100%;
    overflow: auto;
    transition: padding var(--speed3);
  }
}

.q-layout > .q-header {
  z-index: 3;
  position: absolute;
  top: 0px;
  right: 0px;
  bottom: auto;
  left: 0px;
  height: var(--header-height);
  min-height: unset;
  border-radius: 0;

  & > nav {
    height: 100%;
    min-height: unset;
  }

  &.fixed {
    position: fixed;

    &::before {
      margin: 0;
    }
  }
}

.q-layout > .q-footer {
  z-index: 3;
  position: absolute;
  top: auto;
  right: 0px;
  bottom: 0px;
  left: 0px;
  height: var(--footer-height);
  min-height: unset;
  border-radius: 0;

  & > nav {
    height: 100%;
    min-height: unset;
  }

  &.fixed {
    position: fixed;

    &::before {
      margin: 0;
    }
  }

  & ~ :not(.q-header, .q-footer, .q-railbar, .q-drawer) {
    padding-bottom: var(--footer-height);
  }
}

.q-layout > .q-railbar {
  z-index: 2;
  position: absolute;
  top: 0px;
  right: auto;
  bottom: 0px;
  left: auto;
  height: 100%;
  overflow: auto;
  transition: all var(--speed3);

  &.fixed {
    position: fixed;
  }

  &.left {
    left: 0px;
    width: var(--left-railbar-width);

    &.bordered {
      border-right: 0.0625rem solid var(--outline);
    }
  }

  &.right {
    right: 0px;
    width: var(--right-railbar-width);

    &.bordered {
      border-left: 0.0625rem solid var(--outline);
    }
  }

  &:not(.offset-top, .offset-bottom) {
    z-index: 4;
  }

  & > .q-list > .q-item {
    flex-direction: column;
    border-radius: 2rem;
    align-items: center;
    justify-content: center;
    padding: 0 8px;
    gap: 0.25em;

    &.wave::after {
      all: unset;
    }

    & > .q-item__section {
      justify-content: start;
    }

    & > i {
      transition: var(--speed1) padding linear;
      padding-inline: 0.25em;
    }

    &:is(:hover, :focus, .active) > i {
      background-color: var(--secondary-container);
      color: var(--on-secondary-container);
      padding: 0 1rem;
      font-variation-settings: "FILL" 1, "wght" 400, "opsz" 24;
    }
  }
}

.q-layout > .q-drawer {
  //TODO Problems with z-index between multiple layouts
  z-index: 1;
  border-radius: 0;

  &:not(.offset-top, .offset-bottom) {
    z-index: 4;
  }

  &.border-radius {
    &__left {
      &--top {
        border-top-left-radius: 16px;
      }
      &--bottom {
        border-bottom-left-radius: 16px;
      }
    }
    &__right {
      &--top {
        border-top-right-radius: 16px;
      }
      &--bottom {
        border-bottom-right-radius: 16px;
      }
    }
  }

  & > .q-list > .q-item.q-link {
    border-radius: 2rem;

    &::before {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 100%;
      opacity: 0;
      border-radius: inherit;
      background: var(--secondary-container);
      z-index: -1;
      transform: scaleX(0.32);
      transition-duration: 0.2s;
      transition-property: transform, opacity;
      transition-timing-function: linear;
    }

    &.active {
      color: var(--on-secondary-container);

      &::before {
        opacity: 1;
        transform: scaleX(1);
      }
    }

    &:hover {
      background-color: var(--on-surface-variant-2);
      font-variation-settings: "GRAD" 50;
    }
  }
}

// Offsets
$L_Railbar: var(--left-railbar-width);
$R_Railbar: var(--right-railbar-width);
$LR_Railbar: calc(#{$L_Railbar} + #{$R_Railbar});

$L_Drawer: var(--left-drawer-width);
$R_Drawer: var(--right-drawer-width);
$LR_Drawer: calc(#{$L_Drawer} + #{$R_Drawer});

$L_Full: calc(#{$L_Railbar} + #{$L_Drawer});
$R_Full: calc(#{$R_Railbar} + #{$R_Drawer});

$L_Railbar-R_Drawer: calc(#{$L_Railbar} + #{$R_Drawer});
$R_Railbar-L_Drawer: calc(#{$R_Railbar} + #{$L_Drawer});

$L_Full-R_Railbar: calc(#{$L_Full} + #{$R_Railbar});
$L_Full-R_Drawer: calc(#{$L_Full} + #{$R_Drawer});
$R_Full-L_Railbar: calc(#{$R_Full} + #{$L_Railbar});
$R_Full-L_Drawer: calc(#{$R_Full} + #{$L_Drawer});

$Full: calc(#{$L_Full} + #{$R_Full});

$elements: (
  top: "header",
  bottom: "footer",
);

@function without($toSub) {
  @return calc(100% - #{$toSub});
}

@mixin include-drawers($baseWidth, $pos, $el) {
  // Left drawer
  &.left ~ .q-#{$el} {
    width: calc(#{$baseWidth} - #{$L_Drawer});
  }

  // Right drawer
  &.right ~ .q-#{$el} {
    width: calc(#{$baseWidth} - #{$R_Drawer});
  }

  // Left drawer + Right drawer
  &.left ~ .q-drawer.active.right:not(.offset-#{$pos}, .overlay) {
    width: calc(#{$baseWidth} - #{$LR_Drawer});
  }
}

// Offset for content
.q-layout {
  & > .q-header ~ :not(.q-header, .q-footer, .q-drawer, .q-railbar) {
    padding-top: var(--header-height);
  }
  & > .q-footer ~ :not(.q-header, .q-footer, .q-drawer, .q-railbar) {
    padding-bottom: var(--footer-height);
  }
  & > .q-drawer.active.left:not(.overlay) ~ :not(.q-header, .q-footer, .q-drawer, .q-railbar) {
    padding-left: $L_Drawer;
  }
  & > .q-drawer.active.right:not(.overlay) ~ :not(.q-header, .q-footer, .q-drawer, .q-railbar) {
    padding-right: $R_Drawer;
  }
  & > .q-railbar.left:not([style="display: none"]) {
    & ~ :not(.q-header, .q-footer, .q-drawer, .q-railbar) {
      padding-left: $L_Railbar;
    }

    & ~ .q-drawer.active.left:not(.overlay) ~ :not(.q-header, .q-footer, .q-drawer, .q-railbar) {
      padding-left: $L_Full;
    }
  }
  & > .q-railbar.right:not([style="display: none"]) {
    & ~ :not(.q-header, .q-footer, .q-drawer, .q-railbar) {
      padding-right: $R_Railbar;
    }

    & ~ .q-drawer.active.right:not(.overlay) ~ :not(.q-header, .q-footer, .q-drawer, .q-railbar) {
      padding-right: $R_Full;
    }
  }
}

// Inline offset for header, footer and drawers
.q-layout {
  @each $pos, $el in $elements {
    & > .q-railbar.left:not([style="display: none"]) {
      &:not(.offset-#{$pos}) ~ .q-#{$el},
      & ~ .q-drawer.left {
        left: $L_Railbar;
      }

      & ~ .q-drawer.active.left:not(.offset-#{$pos}, .overlay) ~ .q-#{$el} {
        left: $L_Full;
      }
    }
    & > .q-railbar.right:not([style="display: none"]) {
      &:not(.offset-#{$pos}) ~ .q-#{$el},
      & ~ .q-drawer.right {
        right: $R_Railbar;
      }

      & ~ .q-drawer.active.right:not(.offset-#{$pos}, .overlay) ~ .q-#{$el} {
        right: $R_Full;
      }
    }

    & > .q-drawer.active.left:not(.offset-#{$pos}, .overlay) ~ .q-#{$el} {
      left: $L_Drawer;
    }
    & > .q-drawer.active.right:not(.offset-#{$pos}, .overlay) ~ .q-#{$el} {
      right: $R_Drawer;
    }
  }
}

// Width for header and footer
.q-layout {
  @each $pos, $el in $elements {
    & > .q-railbar.left:not(.offset-#{$pos}, [style="display: none"]) {
      // Left railbar
      & ~ .q-#{$el} {
        width: without($L_Railbar);
      }

      & ~ .q-drawer.active:not(.offset-#{$pos}, .overlay) {
        @include include-drawers(without($L_Railbar), $pos, $el);
      }

      & ~ .q-railbar.right:not(.offset-#{$pos}, [style="display: none"]) {
        // Left railbar + Right railbar
        & ~ .q-#{$el} {
          width: without($LR_Railbar);
        }

        & ~ .q-drawer.active:not(.offset-#{$pos}, .overlay) {
          @include include-drawers(without($LR_Railbar), $pos, $el);
        }
      }
    }

    & > .q-railbar.right:not(.offset-#{$pos}, [style="display: none"]) {
      // Right railbar
      & ~ .q-#{$el} {
        width: without($R_Railbar);
      }

      & ~ .q-drawer.active:not(.offset-#{$pos}, .overlay) {
        @include include-drawers(without($R_Railbar), $pos, $el);
      }
    }

    & > .q-drawer.active:not(.offset-#{$pos}, .overlay) {
      @include include-drawers(100%, $pos, $el);
    }
  }
}

// Height for railbars and drawers
.q-layout {
  & > .q-railbar,
  & > .q-drawer {
    &.offset-top.offset-bottom {
      height: calc(100% - var(--header-height) - var(--footer-height));
    }
  }

  @each $pos, $el in $elements {
    & > .q-railbar,
    & > .q-drawer {
      &.offset-#{$pos} {
        #{$pos}: var(--#{$el}-height);
        height: calc(100% - var(--#{$el}-height));
      }
    }
  }
}
