@use "sass:list";
@use "$css/mixins";
@use "$css/disabled";

$root: ".q-switch";
$track: "#{$root}__track";
$handle: "#{$root}__handle";
$icon: "#{$root}__icon";

$checked: "[aria-checked]";
$unchecked: ":not([aria-checked])";

$check-map: (
  "checked": "[aria-checked]",
  "unchecked": ":not([aria-checked])",
);

@function getColor($el, $checked: false, $hovered: null) {
  @if $el == "track" {
    @return if($checked, var(--primary), var(--surface-container-highest));
  } @else if $el == "icon" {
    @return if($checked, var(--on-primary-container), var(--surface-container-highest));
  } @else if $el == "handle" {
    @if ($checked) {
      @return if($hovered, var(--primary-container), var(--on-primary));
    } @else {
      @return if($hovered, var(--on-surface-variant), var(--outline));
    }
  }

  @error "The given element #{$el} is not supported.";
}

@layer q-switch {
  .q-switch {
    position: relative;

    display: inline-flex;
    align-items: center;
    flex-shrink: 0; // Stop from collapsing in flex containers
    gap: 0.8rem;

    cursor: pointer;

    outline: none;

    &--reversed {
      flex-direction: row-reverse;
    }

    &__inner {
      width: 3.25rem;
      height: 2rem;
      border-radius: 10rem;
    }

    & input {
      appearance: none;
      outline: none;
      margin: 0;
      position: absolute;
      width: 100%;
      z-index: 1;
      cursor: inherit;
    }
  }

  // Track
  .q-switch {
    & #{$track} {
      position: absolute;
      width: 100%;
      height: 100%;
      box-sizing: border-box;

      display: flex;
      justify-content: center;
      align-items: center;

      border-radius: 10rem;
      cursor: pointer;

      &::before {
        content: "";
        position: absolute;
        height: 100%;
        width: 100%;

        display: flex;

        border-radius: inherit;
        box-sizing: border-box;
        transition-property: opacity, background-color;
        transition-timing-function: linear;
        transition-duration: 67ms;
      }
    }

    @each $state, $selector in $check-map {
      &#{$selector} #{$track}::before {
        background-color: getColor("track", $state == "checked");
      }
    }

    &#{$checked} #{$track} {
      background-color: transparent;
      border-color: transparent;

      &::before {
        background-clip: content-box;
      }
    }

    &#{$unchecked} #{$track}::before {
      border-color: var(--outline);
      border-style: solid;
      border-width: 0.125rem;
    }

    &[aria-disabled] #{$track}:is(::before, ::after) {
      transition: none;
      opacity: 38%;
    }
  }

  // Handle container
  .q-switch {
    & #{$handle}-container {
      position: relative;

      display: flex;
      place-content: center;
      place-items: center;

      // cubic-bezier(0.13, 0.78, 0.33, 1.15) for little bounce
      transition: margin 200ms ease;
    }

    &#{$checked} #{$handle}-container {
      margin-inline-start: 1.25rem;
    }

    &#{$unchecked} #{$handle}-container {
      margin-inline-end: 1.25rem;
    }

    &[aria-disabled] #{$handle}-container {
      transition: none;
    }
  }

  // Handle
  .q-switch {
    & #{$handle} {
      height: 1rem;
      width: 1rem;

      border-radius: 100%;

      transform-origin: center;
      transition-property: height, width;
      transition-duration: 250ms, 250ms;
      transition-timing-function: cubic-bezier(0.2, 0, 0, 1), cubic-bezier(0.2, 0, 0, 1);
      z-index: 0;

      &::before {
        content: "";
        position: absolute;
        inset: 0;

        display: flex;
        border-radius: inherit;
        box-sizing: border-box;
        transition: background-color 67ms linear;
      }

      &::after {
        content: "";
        position: absolute;
        inset: -0.5rem;
        border-radius: inherit;

        background-color: transparent;
        opacity: 0.08;
      }
    }

    &:not([aria-disabled])#{$checked}:is(:hover, :focus-within) #{$handle}::after {
      background-color: var(--primary);
    }

    &:not([aria-disabled])#{$unchecked}:is(:hover, :focus-within) #{$handle}::after {
      background-color: var(--on-surface);
    }

    & #{$handle}--with-icon,
    &#{$checked} #{$handle} {
      height: 1.5rem;
      width: 1.5rem;
    }

    &:not([aria-disabled]):active #{$handle} {
      height: 1.75rem;
      width: 1.75rem;
      transition-timing-function: linear;
      transition-duration: 100ms;
    }

    @each $state, $selector in $check-map {
      &#{$selector}:not([aria-disabled]) {
        & #{$handle}::before {
          background-color: getColor("handle", $state == "checked", false);
        }

        &:is(:hover, :focus-within, :active) #{$handle}::before {
          background-color: getColor("handle", $state == "checked", true);
        }
      }
    }
  }

  // Icon
  .q-switch {
    & #{$icon} {
      position: absolute;
      // Equivalent to top, right, bottom and left set to 0
      inset: 0;
      margin: auto;
      display: flex;
      align-items: center;
      justify-content: center;
      color: currentColor;

      transition:
        opacity 33ms linear,
        transform 167ms cubic-bezier(0.2, 0, 0, 1);
      opacity: 0;
    }

    &[aria-checked] #{$icon}--checked,
    &:not([aria-checked]) #{$icon}--unchecked {
      opacity: 1;
    }

    // rotate checked icon into view when there is no unchecked icon
    &:not([aria-checked]) #{$handle}:not(#{$handle}--with-icon) #{icon}--checked {
      transform: rotate(-45deg);
    }

    &#{$checked} {
      & #{$icon} {
        transition: none;
      }
    }

    @each $state, $selector in $check-map {
      &#{$selector} {
        & #{$icon}--#{$state} {
          color: getColor("icon", $state == "checked");
        }
      }
    }
  }
}

// Disabled
@layer q-switch--disabled {
  .q-switch[aria-disabled] {
    &,
    & * {
      @include disabled.base();
    }

    & #{$track}::before {
      background-color: disabled.rest-color("surface-container-high");
      border-color: disabled.rest-color("on-surface");
    }

    & #{$handle} {
      background-color: disabled.font-color();
    }

    & #{$icon} {
      color: disabled.font-color("surface-container-high");
    }

    &#{$checked} {
      & #{$track}::before {
        background-color: disabled.rest-color();
      }

      & #{$handle} {
        background-color: var(--surface);
      }

      & #{$icon} {
        color: disabled.font-color();
      }
    }

    & :is(#{$handle}, #{$handle}::before) {
      transition: none;
    }
  }
}
